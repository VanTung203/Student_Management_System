import tkinter as tk
from tkinter import Menu, filedialog, ttk, messagebox
from VanPhuTung.DTO.sinhvienDTO import SinhVienDTO
from VanPhuTung.GUI.canhbaohocvuGUI import CanhBaoHocVuGUI
from VanPhuTung.BLL.sinhvienBLL import SinhVienBLL

def show_main_window():
    root = tk.Tk()
    root.title("Qu·∫£n l√Ω sinh vi√™n")
    root.geometry("1200x760")
    root.configure(bg="#f7f7f7")

    SinhVienGUI(root)

    root.mainloop()

class SinhVienGUI:
    def __init__(self, root):
        self.root = root
        self.BLL = SinhVienBLL()
        self.sort_order = {}
        self.create_menu()
        self.create_student_form()
        self.create_view_main()

    def create_menu(self):
        menubar = Menu(self.root, bg="#4caf50", fg="white", activebackground="#81c784")
        self.root.config(menu=menubar)

        chucnang_menu = Menu(menubar, tearoff=0, bg="#ffffff", activebackground="#c8e6c9")
        menubar.add_cascade(label="Ch·ª©c nƒÉng", menu=chucnang_menu)
        chucnang_menu.add_command(label="C·∫£nh b√°o h·ªçc v·ª•", command=self.open_canhcao)

    def create_view_main(self):
        # Frame ch√≠nh
        frame = tk.Frame(self.root, bg="#f7f7f7")
        frame.pack(fill=tk.BOTH, expand=True)

        # N√∫t ch·ªçn file
        def select_file():
            file_path = filedialog.askopenfilename(title="Ch·ªçn file excel", filetypes=[("Excel files", "*.xls;*.xlsx")])
            if file_path:
                self.BLL.sync_excel_toDAL(file_path, self.tree, self.refreshGUI)

        # Frame cho c√°c n√∫t
        button_frame = tk.Frame(frame, bg="#f7f7f7")
        button_frame.grid(row=0, column=0, columnspan=5, pady=10, sticky='ew')

        button_style = {"font": ("Arial", 12, "bold"), "bg": "#4caf50", "fg": "white", "relief": tk.RAISED,
                        "cursor": "hand2", "width": 15}

        # Button select file
        button_select_file = tk.Button(button_frame, text="üìÇ Nh·∫≠p file", **button_style, command=select_file)
        button_select_file.grid(row=0, column=0, padx=5, pady=5)

        # Button update
        button_update = tk.Button(button_frame, text="‚úèÔ∏èS·ª≠a", **button_style, command=self.update_student)
        button_update.grid(row=0, column=1, padx=5, pady=5)

        # Button select student
        button_select = tk.Button(button_frame, text="üëÅÔ∏èChi ti·∫øt", **button_style, command=self.select_student)
        button_select.grid(row=0, column=2, padx=5, pady=5)

        # Button add
        button_add = tk.Button(button_frame, text="‚ûï Th√™m", **button_style, command=self.add_student)
        button_add.grid(row=0, column=3, padx=5, pady=5)

        # Button delete
        button_delete = tk.Button(button_frame, text="‚ùå Xo√°", **button_style, command=self.delete_student)
        button_delete.grid(row=0, column=4, padx=5, pady=5)

        # Button export
        button_export = tk.Button(button_frame, text="üìÑ Xu·∫•t file", **button_style, command=self.save_to_excel)
        button_export.grid(row=0, column=5, padx=5, pady=5)

        # Button refresh
        button_refresh = tk.Button(button_frame, text="üîÑ L√†m m·ªõi", **button_style, command=self.refreshGUI)
        button_refresh.grid(row=0, column=6, padx=5, pady=5)

        # Search Frame
        input_frame = tk.Frame(frame, bg="#f7f7f7")
        input_frame.grid(row=1, column=0, columnspan=5, pady=10, sticky='ew')

        tk.Label(input_frame, text="Nh·∫≠p th√¥ng tin:", font=("Arial", 12), bg="#f7f7f7").grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.search_entry = tk.Entry(input_frame, font=("Arial", 12), width=30)
        self.search_entry.grid(row=1, column=1, padx=5, pady=5, sticky='w')

        search_button = tk.Button(input_frame, text="üîç T√¨m ki·∫øm", **button_style, command=self.search_student)
        search_button.grid(row=1, column=2, padx=5, pady=5, sticky='w')

        # Tree
        tree_frame = tk.Frame(frame, bg="#ffffff", bd=1, relief=tk.SUNKEN)
        tree_frame.grid(row=2, column=0, columnspan=5, pady=10, sticky='nsew')

        self.tree = ttk.Treeview(tree_frame, columns=(), show='headings', height=22, style="Custom.Treeview")
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill='y')
        self.tree.configure(yscrollcommand=scrollbar.set)

        self.columns_sinhvien = ("M√£ sinh vi√™n", "H·ªç ƒë·ªám", "T√™n", "T·ªïng bu·ªïi v·∫Øng", "L·ªõp h·ªçc", "ƒê·ª£t", "T√™n m√¥n h·ªçc")

        self.tree.config(columns=self.columns_sinhvien)
        for col in self.columns_sinhvien:
            self.tree.heading(col, text=col, command=lambda _col=col: self.sort_column(_col, False))
            self.tree.column(col, width=120 if col in ["M√£ sinh vi√™n", "H·ªç ƒë·ªám", "T√™n", "L·ªõp h·ªçc", "ƒê·ª£t", "T√™n m√¥n h·ªçc"] else 100)

        self.BLL.load_sinhvienBLL_treeview(self.tree)

        # C·∫•u h√¨nh tr·ªçng s·ªë c·ªßa c√°c h√†ng v√† c·ªôt ƒë·ªÉ Treeview m·ªü r·ªông
        frame.rowconfigure(0, weight=0)
        frame.rowconfigure(1, weight=0)
        frame.rowconfigure(2, weight=1)
        frame.columnconfigure(0, weight=1)

    def create_student_form(self):
        form_frame = tk.LabelFrame(self.root, text="Th√¥ng tin sinh vi√™n", padx=10, pady=10, bg="#f7f7f7", font=("Arial", 12, "bold"))
        form_frame.pack(fill="x", padx=10, pady=10)

        fields = ["M√£ sinh vi√™n", "H·ªç ƒë·ªám", "T√™n", "Gi·ªõi t√≠nh", "Ng√†y sinh", "V·∫Øng c√≥ ph√©p", "V·∫Øng kh√¥ng ph√©p", "T·ªïng s·ªë ti·∫øt", "Ph·∫ßn trƒÉm v·∫Øng", "L·ªõp h·ªçc", "ƒê·ª£t", "M√£ l·ªõp h·ªçc ph·∫ßn", "Ng√†y v·∫Øng"]

        self.entries = {}
        for idx, field in enumerate(fields):
            column = (idx % 3) * 2
            row = idx // 3
            tk.Label(form_frame, text=field, bg="#f7f7f7", font=("Arial", 10, "bold")).grid(row=row, column=column, sticky='w', pady=5, padx=10)
            entry = tk.Entry(form_frame, font=("Arial", 10), width=30)
            entry.grid(row=row, column=column + 1, pady=5, padx=10)
            self.entries[field] = entry

    def sort_column(self, col, reverse):
        if col == "T·ªïng bu·ªïi v·∫Øng":
            l = [(int(self.tree.set(k, col)), k) for k in self.tree.get_children('')]
        else:
            l = [(self.tree.set(k, col), k) for k in self.tree.get_children('')]
        l.sort(reverse=reverse)
        for index, (val, k) in enumerate(l):
            self.tree.move(k, '', index)
        self.tree.heading(col, command=lambda: self.sort_column(col, not reverse))

    def refreshGUI(self):
        self.BLL.load_sinhvienBLL_treeview(self.tree)

    def on_view_change(self, event):
        self.BLL.load_sinhvienBLL_treeview(self.tree)

    def open_canhcao(self):
        self.root.withdraw()
        canhcao_window = tk.Toplevel()
        CanhBaoHocVuGUI(canhcao_window)
        canhcao_window.protocol("WM_DELETE_WINDOW", lambda: self.on_close_new_window(canhcao_window))

    def on_close_new_window(self, new_window):
        new_window.destroy()
        self.root.deiconify()

    def add_student(self):
        # L·∫•y th√¥ng tin t·ª´ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        ma_sinh_vien = self.entries["M√£ sinh vi√™n"].get().strip()
        ho_dem = self.entries["H·ªç ƒë·ªám"].get().strip()
        ten = self.entries["T√™n"].get().strip()
        gioi_tinh = self.entries["Gi·ªõi t√≠nh"].get().strip()
        ngay_sinh = self.entries["Ng√†y sinh"].get().strip()
        vang_co_phep = self.entries["V·∫Øng c√≥ ph√©p"].get().strip()
        vang_khong_phep = self.entries["V·∫Øng kh√¥ng ph√©p"].get().strip()
        tong_so_tiet = self.entries["T·ªïng s·ªë ti·∫øt"].get().strip()
        phan_tram_vang = self.entries["Ph·∫ßn trƒÉm v·∫Øng"].get().strip()
        lop_hoc = self.entries["L·ªõp h·ªçc"].get().strip()
        dot = self.entries["ƒê·ª£t"].get().strip()
        ma_lop_hoc_phan = self.entries["M√£ l·ªõp h·ªçc ph·∫ßn"].get().strip()
        ngay_vang = self.entries["Ng√†y v·∫Øng"].get().strip()

        # Ki·ªÉm tra xem c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë√£ ƒë∆∞·ª£c nh·∫≠p hay ch∆∞a
        if not ma_sinh_vien or not ho_dem or not ten:
            messagebox.showwarning("Th√¥ng b√°o", "H√£y nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
            return

        sinhvien = SinhVienDTO(
            maSinhVien=ma_sinh_vien,  # Use the correct parameter name
            hoDem=ho_dem,
            ten=ten,
            gioiTinh=gioi_tinh,
            ngaySinh=ngay_sinh,
            vangCoPhep=vang_co_phep,
            vangKhongPhep=vang_khong_phep,
            tongSoTiet=tong_so_tiet,
            phanTramVang=phan_tram_vang,
            lopHoc=lop_hoc,
            dot=dot,
            maLopHocPhan=ma_lop_hoc_phan,
            ngayVang=ngay_vang
        )

        self.BLL.add_sinhvien(sinhvien)
        self.refreshGUI()

    def delete_student(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("Th√¥ng b√°o", "L·ªói: Ch·ªçn sinh vi√™n ƒë·ªÉ x√≥a")
            return
        maSinhVien = self.tree.item(selected_item)['values'][0]
        confirm = messagebox.askyesno("Th√¥ng b√°o", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a sinh vi√™n {maSinhVien} kh√¥ng?")
        if confirm:
            self.BLL.delete_sinhvien(maSinhVien)
            self.refreshGUI()

    def select_student(self):
        selected_item = self.tree.selection()  # L·∫•y m·ª•c ƒë∆∞·ª£c ch·ªçn t·ª´ b·∫£ng
        if not selected_item:
            messagebox.showwarning("Th√¥ng b√°o", "L·ªói: Ch·ªçn sinh vi√™n ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt")
            return

        # L·∫•y d·ªØ li·ªáu sinh vi√™n t·ª´ m·ª•c ƒë∆∞·ª£c ch·ªçn
        sinhvien_data = self.tree.item(selected_item)['values']

        # B·ªè k√Ω t·ª± 'S' ·ªü ƒë·∫ßu c·ªßa m√£ l·ªõp h·ªçc ph·∫ßn n·∫øu c√≥
        maLopHocPhan = sinhvien_data[13]
        if maLopHocPhan.startswith("S"):
            maLopHocPhan = maLopHocPhan[1:]

        # ƒêi·ªÅn th√¥ng tin v√†o c√°c tr∆∞·ªùng d·ªØ li·ªáu trong form
        self.entries["M√£ sinh vi√™n"].delete(0, tk.END)
        self.entries["M√£ sinh vi√™n"].insert(0, sinhvien_data[0])

        self.entries["H·ªç ƒë·ªám"].delete(0, tk.END)
        self.entries["H·ªç ƒë·ªám"].insert(0, sinhvien_data[1])

        self.entries["T√™n"].delete(0, tk.END)
        self.entries["T√™n"].insert(0, sinhvien_data[2])

        self.entries["Gi·ªõi t√≠nh"].delete(0, tk.END)
        self.entries["Gi·ªõi t√≠nh"].insert(0, sinhvien_data[7])

        self.entries["Ng√†y sinh"].delete(0, tk.END)
        self.entries["Ng√†y sinh"].insert(0, sinhvien_data[8])

        self.entries["V·∫Øng c√≥ ph√©p"].delete(0, tk.END)
        self.entries["V·∫Øng c√≥ ph√©p"].insert(0, sinhvien_data[9])

        self.entries["V·∫Øng kh√¥ng ph√©p"].delete(0, tk.END)
        self.entries["V·∫Øng kh√¥ng ph√©p"].insert(0, sinhvien_data[10])

        self.entries["T·ªïng s·ªë ti·∫øt"].delete(0, tk.END)
        self.entries["T·ªïng s·ªë ti·∫øt"].insert(0, sinhvien_data[11])

        self.entries["Ph·∫ßn trƒÉm v·∫Øng"].delete(0, tk.END)
        self.entries["Ph·∫ßn trƒÉm v·∫Øng"].insert(0, sinhvien_data[12])

        self.entries["L·ªõp h·ªçc"].delete(0, tk.END)
        self.entries["L·ªõp h·ªçc"].insert(0, sinhvien_data[4])

        self.entries["ƒê·ª£t"].delete(0, tk.END)
        self.entries["ƒê·ª£t"].insert(0, sinhvien_data[5])

        # ƒêi·ªÅn m√£ l·ªõp h·ªçc ph·∫ßn ƒë√£ s·ª≠a v√†o form
        self.entries["M√£ l·ªõp h·ªçc ph·∫ßn"].delete(0, tk.END)
        self.entries["M√£ l·ªõp h·ªçc ph·∫ßn"].insert(0, maLopHocPhan)

        self.entries["Ng√†y v·∫Øng"].delete(0, tk.END)
        self.entries["Ng√†y v·∫Øng"].insert(0, sinhvien_data[15])

    def update_student(self):
        selected_item = self.tree.selection()  # Get the selected item
        if not selected_item:
            messagebox.showwarning("Th√¥ng b√°o", "L·ªói: Ch·ªçn sinh vi√™n ƒë·ªÉ s·ª≠a")
            return

        msv = self.entries["M√£ sinh vi√™n"].get()
        ho_dem = self.entries["H·ªç ƒë·ªám"].get()
        ten = self.entries["T√™n"].get()
        gioi_tinh = self.entries["Gi·ªõi t√≠nh"].get()
        ngay_sinh = self.entries["Ng√†y sinh"].get()
        vang_co_phep = self.entries["V·∫Øng c√≥ ph√©p"].get()
        vang_khong_phep = self.entries["V·∫Øng kh√¥ng ph√©p"].get()
        tong_tiet = self.entries["T·ªïng s·ªë ti·∫øt"].get()
        phan_tram_vang = self.entries["Ph·∫ßn trƒÉm v·∫Øng"].get()
        lop_hoc = self.entries["L·ªõp h·ªçc"].get()
        dot = self.entries["ƒê·ª£t"].get()
        ma_lop_hoc_phan = self.entries["M√£ l·ªõp h·ªçc ph·∫ßn"].get()
        ngay_vang = self.entries["Ng√†y v·∫Øng"].get()

        sinhvien = SinhVienDTO(
            maSinhVien=msv,
            hoDem=ho_dem,
            ten=ten,
            gioiTinh=gioi_tinh,
            ngaySinh=ngay_sinh,
            vangCoPhep=int(vang_co_phep),
            vangKhongPhep=int(vang_khong_phep),
            tongSoTiet=int(tong_tiet),
            phanTramVang=float(phan_tram_vang),
            lopHoc=lop_hoc,
            dot=dot,
            maLopHocPhan=ma_lop_hoc_phan,
            ngayVang=ngay_vang
        )

        self.BLL.update_sinhvien(sinhvien)
        self.refreshGUI()


    def search_student(self):
        ma_sinh_vien = self.search_entry.get()
        self.BLL.load_sinhvienBLL_treeview(self.tree, ma_sinh_vien)


    def save_to_excel(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx",
                                                 filetypes=[("Excel files", "*.xls;*.xlsx")])
        if file_path:
            self.BLL.save_to_excel(file_path)